{"metadata":{"externalID":"s:7Parsing6ParserPAAE12replaceError4withAA7ParsersO07ReplaceD0Vy_xG6OutputQz_tF::SYNTHESIZED::s:7Parsing7ParsersO10CompactMapV","roleHeading":"Instance Method","modules":[{"name":"Parsing"}],"title":"replaceError(with:)","symbolKind":"method","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"replaceError","kind":"identifier"},{"text":"(","kind":"text"},{"text":"with","kind":"externalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Output"},{"kind":"text","text":") -> "},{"preciseIdentifier":"s:7Parsing7ParsersO","kind":"typeIdentifier","text":"Parsers"},{"kind":"text","text":"."},{"preciseIdentifier":"s:7Parsing7ParsersO12ReplaceErrorV","kind":"typeIdentifier","text":"ReplaceError"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":">"}],"extendedModule":"Parsing","role":"symbol"},"schemaVersion":{"major":0,"minor":3,"patch":0},"abstract":[{"text":"A parser that replaces its error with a provided output.","type":"text"}],"primaryContentSections":[{"declarations":[{"platforms":["Linux"],"tokens":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"replaceError"},{"kind":"text","text":"("},{"kind":"externalParam","text":"with"},{"kind":"text","text":" "},{"kind":"internalParam","text":"output"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"text":"Output","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parsers","preciseIdentifier":"s:7Parsing7ParsersO","text":"Parsers","kind":"typeIdentifier"},{"text":".","kind":"text"},{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parsers\/ReplaceError","preciseIdentifier":"s:7Parsing7ParsersO12ReplaceErrorV","text":"ReplaceError","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":">","kind":"text"}],"languages":["swift"]}],"kind":"declarations"},{"parameters":[{"name":"output","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"An output to return should the upstream parser fail."}]}]}],"kind":"parameters"},{"content":[{"level":2,"type":"heading","text":"Return Value","anchor":"return-value"},{"inlineContent":[{"type":"text","text":"A parser that never fails."}],"type":"paragraph"}],"kind":"content"},{"content":[{"text":"Discussion","anchor":"discussion","type":"heading","level":2},{"inlineContent":[{"text":"Useful for providing a default output for a parser.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"For example, we could create a parser that parses a plus or minus sign and maps the result to","type":"text"},{"text":" ","type":"text"},{"text":"a positive or negative multiplier respectively, or else defaults to a positive multiplier:","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["let sign = OneOf {","  \"+\".map { 1 }","  \"-\".map { -1 }","}",".replaceError(with: 1)"]},{"inlineContent":[{"type":"text","text":"Notably this parser is non-throwing:"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["var input = \"-123\"[...]","","\/\/ No `try` required:","sign.parse(&input)  \/\/ -1","input               \/\/ \"123\"","","\/\/ Simply returns the default when parsing fails:","sign.parse(&input)  \/\/ 1"]},{"inlineContent":[{"type":"text","text":"This means it can be used to turn throwing parsers into non-throwing ones, which is important"},{"type":"text","text":" "},{"type":"text","text":"for building up complex parsers that cannot fail."}],"type":"paragraph"}],"kind":"content"}],"hierarchy":{"paths":[["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parsers","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parsers\/CompactMap","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parsers\/CompactMap\/Parser-Implementations"]]},"variants":[{"paths":["\/documentation\/parsing\/parsers\/compactmap\/replaceerror(with:)"],"traits":[{"interfaceLanguage":"swift"}]}],"kind":"symbol","sections":[],"identifier":{"url":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parsers\/CompactMap\/replaceError(with:)","interfaceLanguage":"swift"},"references":{"doc://co.pointfree.Parsing/documentation/Parsing/Parsers/CompactMap/replaceError(with:)":{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parsers\/CompactMap\/replaceError(with:)","url":"\/documentation\/parsing\/parsers\/compactmap\/replaceerror(with:)","role":"symbol","title":"replaceError(with:)","kind":"symbol","abstract":[{"type":"text","text":"A parser that replaces its error with a provided output."}],"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"replaceError","kind":"identifier"},{"text":"(","kind":"text"},{"text":"with","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Output","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"preciseIdentifier":"s:7Parsing7ParsersO","kind":"typeIdentifier","text":"Parsers"},{"kind":"text","text":"."},{"preciseIdentifier":"s:7Parsing7ParsersO12ReplaceErrorV","kind":"typeIdentifier","text":"ReplaceError"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":">"}],"type":"topic"},"doc://co.pointfree.Parsing/documentation/Parsing/Parsers/ReplaceError":{"url":"\/documentation\/parsing\/parsers\/replaceerror","kind":"symbol","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parsers\/ReplaceError","type":"topic","navigatorTitle":[{"text":"ReplaceError","kind":"identifier"}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ReplaceError","kind":"identifier"}],"role":"symbol","abstract":[{"text":"A parser that replaces its error with a provided output.","type":"text"}],"title":"Parsers.ReplaceError"},"doc://co.pointfree.Parsing/documentation/Parsing/Parsers":{"type":"topic","url":"\/documentation\/parsing\/parsers","kind":"symbol","role":"symbol","title":"Parsers","navigatorTitle":[{"text":"Parsers","kind":"identifier"}],"abstract":[{"text":"A namespace for types that serve as parsers.","type":"text"}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parsers","fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Parsers","kind":"identifier"}]},"doc://co.pointfree.Parsing/documentation/Parsing/Parsers/CompactMap":{"role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"CompactMap","kind":"identifier"}],"url":"\/documentation\/parsing\/parsers\/compactmap","type":"topic","abstract":[{"text":"A parser that outputs the non-","type":"text"},{"code":"nil","type":"codeVoice"},{"text":" result of calling the given transformation with the output","type":"text"},{"text":" ","type":"text"},{"text":"of its upstream parser.","type":"text"}],"navigatorTitle":[{"text":"CompactMap","kind":"identifier"}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parsers\/CompactMap","kind":"symbol","title":"Parsers.CompactMap"},"doc://co.pointfree.Parsing/documentation/Parsing":{"url":"\/documentation\/parsing","role":"collection","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing","abstract":[{"text":"A library for turning nebulous data into well-structured data, with a focus on composition,","type":"text"},{"text":" ","type":"text"},{"text":"performance, generality, and ergonomics.","type":"text"}],"kind":"symbol","type":"topic","title":"Parsing"},"doc://co.pointfree.Parsing/documentation/Parsing/Parsers/CompactMap/Parser-Implementations":{"kind":"article","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parsers\/CompactMap\/Parser-Implementations","type":"topic","role":"collectionGroup","title":"Parser Implementations","url":"\/documentation\/parsing\/parsers\/compactmap\/parser-implementations","abstract":[]}}}
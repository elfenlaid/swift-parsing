{"schemaVersion":{"patch":0,"minor":3,"major":0},"abstract":[{"text":"Learn how the library is designed, including its use of protocols, result builders and operators.","type":"text"}],"hierarchy":{"paths":[["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing"],["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser"]]},"metadata":{"role":"article","title":"Design","roleHeading":"Article","modules":[{"name":"Parsing"}]},"identifier":{"url":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Design","interfaceLanguage":"swift"},"seeAlsoSections":[{"title":"Articles","identifiers":["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/GettingStarted","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/StringAbstractions","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/ErrorMessages","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Backtracking"],"generated":true}],"sections":[],"kind":"article","primaryContentSections":[{"kind":"content","content":[{"text":"Protocol","anchor":"Protocol","level":2,"type":"heading"},{"inlineContent":[{"type":"text","text":"The design of the library is largely inspired by the Swift standard library and Apple’s Combine"},{"type":"text","text":" "},{"type":"text","text":"framework. A parser is represented as a protocol that many types conform to, and then parser"},{"type":"text","text":" "},{"type":"text","text":"transformations (also known as “combinators”) are methods that return concrete types conforming to"},{"type":"text","text":" "},{"type":"text","text":"the parser protocol."}],"type":"paragraph"},{"inlineContent":[{"text":"For example, to parse all the characters from the beginning of a substring until you encounter a","type":"text"},{"text":" ","type":"text"},{"text":"comma you can use the ","type":"text"},{"type":"codeVoice","code":"Prefix"},{"text":" parser:","type":"text"}],"type":"paragraph"},{"code":["let parser = Prefix { $0 != \",\" }","","var input = \"Hello,World\"[...]","try parser.parse(&input)  \/\/ \"Hello\"","input                     \/\/ \",World\""],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"text","text":"The type of this parser is:"}],"type":"paragraph"},{"code":["Prefix<Substring>"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"text","text":"We can "},{"type":"codeVoice","code":".map"},{"type":"text","text":" on this parser in order to transform its output, which in this case is the string"},{"type":"text","text":" "},{"type":"text","text":"“Hello”:"}],"type":"paragraph"},{"code":["let parser = Prefix { $0 != \",\" }",".map { $0 + \"!!!\" }","","var input = \"Hello,World\"[...]","try parser.parse(&input)  \/\/ \"Hello!!!\"","input                     \/\/ \",World\""],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"text":"The type of this parser is now:","type":"text"}],"type":"paragraph"},{"code":["Parsers.Map<Prefix<Substring>, Substring>"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"text":"Notice that the type of the parser encodes the operations that we performed. This adds a bit of","type":"text"},{"text":" ","type":"text"},{"text":"complexity when using these types, but comes with some performance benefits because Swift can","type":"text"},{"text":" ","type":"text"},{"text":"usually inline and optimize away the creation of those nested types.","type":"text"}],"type":"paragraph"},{"level":2,"text":"Result Builders","anchor":"Result-Builders","type":"heading"},{"inlineContent":[{"text":"The library takes advantage of Swift’s ","type":"text"},{"code":"@resultBuilder","type":"codeVoice"},{"text":" feature to make constructing complex parsers","type":"text"},{"text":" ","type":"text"},{"text":"as fluent as possible, and should be reminiscent of how views are constructed in SwiftUI. The main","type":"text"},{"text":" ","type":"text"},{"text":"entry point into building a parser is the ","type":"text"},{"code":"Parse","type":"codeVoice"},{"text":" builder:","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["Parse {","","}"],"type":"codeListing"},{"inlineContent":[{"text":"In this builder block you can specify parsers that will be run one after another. For example, if","type":"text"},{"text":" ","type":"text"},{"text":"you wanted to parse an integer, then a comma, and then a boolean from a string, you can simply do:","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["Parse {","  Int.parser()","  \",\"","  Bool.parser()","}"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"Note that the "},{"code":"String","type":"codeVoice"},{"type":"text","text":" type conforms to the "},{"isActive":true,"type":"reference","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser"},{"type":"text","text":" protocol, and represents a parser that"},{"type":"text","text":" "},{"type":"text","text":"consumes that exact string from the beginning of an input if it matches, and otherwise fails."}],"type":"paragraph"},{"inlineContent":[{"text":"Many of the parsers and operators that come with the library are configured with parser builders","type":"text"},{"text":" ","type":"text"},{"text":"to maximize readability of the parsers. For example, to parse accounting syntax of numbers, where","type":"text"},{"text":" ","type":"text"},{"text":"parenthesized numbers are negative, we can use the ","type":"text"},{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/OneOf","isActive":true,"type":"reference"},{"text":" parser builder:","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["let accountingNumber = OneOf {","  Digits()","","  Parse {","    \"(\"; Digits(); \")\"","  }","  .map { -$0 }","}","","try accountingNumber.parse(\"100\")    \/\/ 100","try accountingNumber.parse(\"(100)\")  \/\/ -100"],"type":"codeListing"},{"level":2,"text":"Operators","anchor":"Operators","type":"heading"},{"inlineContent":[{"text":"Parser operators (also called “combinators”) are methods defined on the ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser"},{"text":" protocol that","type":"text"},{"text":" ","type":"text"},{"text":"return a parser. For example, the ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser\/map(_:)-4hsj5"},{"text":" operator is a method that returns","type":"text"},{"text":" ","type":"text"},{"text":"something called a ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parsers\/Map"},{"text":":","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["extension Parser {","  public func map<NewOutput>(","    _ transform: @escaping (Output) -> NewOutput","  ) -> Parsers.Map<Self, NewOutput> {","    .init(upstream: self, transform: transform)","  }","}"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"And "},{"type":"reference","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parsers\/Map","isActive":true},{"type":"text","text":" is a dedicated type that implements the logic of the map operation. In"},{"type":"text","text":" "},{"type":"text","text":"particular, in runs the upstream parser and then transforms its output:"}],"type":"paragraph"},{"syntax":"swift","code":["extension Parsers {","  public struct Map<Upstream: Parser, NewOutput>: Parser {","    public let upstream: Upstream","    public let transform: (Upstream.Output) -> NewOutput","","    public func parse(_ input: inout Upstream.Input) rethrows -> NewOutput {","      self.transform(try self.upstream.parse(&input))","    }","  }","}"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"Types that conform to the "},{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser","type":"reference","isActive":true},{"type":"text","text":" protocol but are not constructed directly, and instead are"},{"type":"text","text":" "},{"type":"text","text":"constructed via operators, are housed in the "},{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parsers","type":"reference","isActive":true},{"type":"text","text":" type. It’s just an empty enum that"},{"type":"text","text":" "},{"type":"text","text":"serves as a namespace for such parsers."}],"type":"paragraph"}]}],"references":{"doc://co.pointfree.Parsing/documentation/Parsing/OneOf":{"role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"OneOf"}],"url":"\/documentation\/parsing\/oneof","type":"topic","abstract":[{"text":"A parser that attempts to run a number of parsers till one succeeds.","type":"text"}],"navigatorTitle":[{"kind":"identifier","text":"OneOf"}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/OneOf","kind":"symbol","title":"OneOf"},"doc://co.pointfree.Parsing/documentation/Parsing/Parsers/Map":{"title":"Parsers.Map","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Map"}],"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Map"}],"abstract":[{"text":"A parser that transforms the output of another parser with a given closure.","type":"text"}],"role":"symbol","url":"\/documentation\/parsing\/parsers\/map","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parsers\/Map","kind":"symbol"},"doc://co.pointfree.Parsing/documentation/Parsing/Backtracking":{"abstract":[{"text":"Learn what backtracking is, how it affects the performance of your parsers, and how to avoid it when","type":"text"},{"text":" ","type":"text"},{"text":"unnecessary.","type":"text"}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Backtracking","url":"\/documentation\/parsing\/backtracking","role":"article","type":"topic","title":"Backtracking","kind":"article"},"doc://co.pointfree.Parsing/documentation/Parsing/Parsers":{"type":"topic","url":"\/documentation\/parsing\/parsers","kind":"symbol","role":"symbol","title":"Parsers","navigatorTitle":[{"text":"Parsers","kind":"identifier"}],"abstract":[{"text":"A namespace for types that serve as parsers.","type":"text"}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parsers","fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Parsers","kind":"identifier"}]},"doc://co.pointfree.Parsing/documentation/Parsing/Parser":{"url":"\/documentation\/parsing\/parser","role":"symbol","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser","abstract":[{"text":"Declares a type that can incrementally parse an ","type":"text"},{"type":"codeVoice","code":"Output"},{"text":" value from an ","type":"text"},{"type":"codeVoice","code":"Input"},{"text":" value.","type":"text"}],"kind":"symbol","navigatorTitle":[{"text":"Parser","kind":"identifier"}],"fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"text":"Parser","kind":"identifier"}],"type":"topic","title":"Parser"},"doc://co.pointfree.Parsing/documentation/Parsing/StringAbstractions":{"abstract":[{"text":"Learn how to write parsers on different levels of string abstractions, giving you the ability to","type":"text"},{"text":" ","type":"text"},{"text":"trade performance for correctness where needed.","type":"text"}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/StringAbstractions","url":"\/documentation\/parsing\/stringabstractions","role":"article","type":"topic","title":"String Abstractions","kind":"article"},"doc://co.pointfree.Parsing/documentation/Parsing/ErrorMessages":{"abstract":[{"type":"text","text":"Learn how the library reports parsing errors and how to integrate your own custom error messages"},{"type":"text","text":" "},{"type":"text","text":"into parsers."}],"type":"topic","title":"Error Messages","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/ErrorMessages","url":"\/documentation\/parsing\/errormessages","role":"article","kind":"article"},"doc://co.pointfree.Parsing/documentation/Parsing":{"url":"\/documentation\/parsing","role":"collection","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing","abstract":[{"text":"A library for turning nebulous data into well-structured data, with a focus on composition,","type":"text"},{"text":" ","type":"text"},{"text":"performance, generality, and ergonomics.","type":"text"}],"kind":"symbol","type":"topic","title":"Parsing"},"doc://co.pointfree.Parsing/documentation/Parsing/Parser/map(_:)-4hsj5":{"url":"\/documentation\/parsing\/parser\/map(_:)-4hsj5","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"map"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"NewOutput"},{"kind":"text","text":">(("},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Output"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"NewOutput"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:7Parsing7ParsersO","text":"Parsers"},{"kind":"text","text":"."},{"kind":"typeIdentifier","preciseIdentifier":"s:7Parsing7ParsersO3MapV","text":"Map"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"NewOutput"},{"kind":"text","text":">"}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser\/map(_:)-4hsj5","role":"symbol","abstract":[{"text":"Returns a parser that transforms the output of this parser with a given closure.","type":"text"}],"title":"map(_:)","kind":"symbol","type":"topic"},"doc://co.pointfree.Parsing/documentation/Parsing/GettingStarted":{"abstract":[{"text":"Learn how to integrate Parsing into your project and write your first parser.","type":"text"}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/GettingStarted","url":"\/documentation\/parsing\/gettingstarted","role":"article","type":"topic","title":"Getting Started","kind":"article"}}}
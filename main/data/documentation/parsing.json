{"topicSections":[{"title":"Articles","identifiers":["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/GettingStarted","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Design","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/StringAbstractions","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/ErrorMessages","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Backtracking"]},{"title":"Protocols","identifiers":["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Conversion","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/CountingRange","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/ParserPrinter","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/PrependableCollection"]},{"title":"Structures","identifiers":["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/AnyConversion","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/AnyParserPrinter","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/ParsePrint"]},{"title":"Type Aliases","identifiers":["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Conditional"]},{"title":"Enumerations","identifiers":["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Conversions","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parsers"]}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing"},"kind":"symbol","sections":[],"hierarchy":{"paths":[[]]},"abstract":[{"text":"A library for turning nebulous data into well-structured data, with a focus on composition,","type":"text"},{"text":" ","type":"text"},{"text":"performance, generality, and ergonomics.","type":"text"}],"schemaVersion":{"minor":3,"major":0,"patch":0},"primaryContentSections":[{"kind":"content","content":[{"level":2,"type":"heading","text":"Additional Resources","anchor":"Additional-Resources"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","identifier":"https:\/\/github.com\/pointfreeco\/swift-parsing","isActive":true}]}]},{"content":[{"type":"paragraph","inlineContent":[{"identifier":"https:\/\/github.com\/pointfreeco\/swift-parsing\/discussions","isActive":true,"type":"reference"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","identifier":"https:\/\/www.pointfree.co\/collections\/parsing","isActive":true}]}]}],"type":"unorderedList"},{"level":2,"text":"Overview","anchor":"Overview","type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Parsing with this library is performed by listing out many small parsers that describe how to"},{"type":"text","text":" "},{"type":"text","text":"incrementally consume small bits from the beginning of an input string. For example, suppose you"},{"type":"text","text":" "},{"type":"text","text":"have a string that holds some user data that you want to parse into an array of "},{"code":"User","type":"codeVoice"},{"type":"text","text":"s:"}]},{"syntax":"swift","code":["var input = \"\"\"","1,Blob,true","2,Blob Jr.,false","3,Blob Sr.,true","\"\"\"","","struct User {","  var id: Int","  var name: String","  var isAdmin: Bool","}"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"A parser can be constructed for transforming the input string into an array of users in succinct"},{"type":"text","text":" "},{"type":"text","text":"and fluent API:"}]},{"syntax":"swift","code":["let user = Parse(User.init) {","  Int.parser()","  \",\"","  Prefix { $0 != \",\" }.map(String.init)","  \",\"","  Bool.parser()","}","","let users = Many {","  user","} separator: {","  \"\\n\"","} terminator: {","  End()","}","","try users.parse(input)  \/\/ [User(id: 1, name: \"Blob\", isAdmin: true), ...]"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"This says that to parse a user we:","type":"text"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Parse and consume an integer from the beginning of the input","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"then a comma"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"then everything up to the next comma","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"then another comma"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"and finally a boolean."}]}]}]},{"type":"paragraph","inlineContent":[{"text":"And to parse an entire array of users we:","type":"text"}]},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"text","text":"Run the "},{"code":"user","type":"codeVoice"},{"type":"text","text":" parser many times"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"between each invocation of "},{"type":"codeVoice","code":"user"},{"type":"text","text":" we run the separator parser to consume a newline"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"and once the ","type":"text"},{"code":"user","type":"codeVoice"},{"text":" and separator parsers have consumed all they can we run the terminator","type":"text"},{"text":" ","type":"text"},{"text":"parser to verify there is no more input to consume.","type":"text"}]}]}]},{"type":"paragraph","inlineContent":[{"text":"Further, if the input is malformed, like say we mistyped one of the booleans, then the parser emits","type":"text"},{"text":" ","type":"text"},{"text":"an error that describes exactly what went wrong:","type":"text"}]},{"syntax":"swift","code":["var input = \"\"\"","1,Blob,true","2,Blob Jr.,false","3,Blob Sr.,tru","\"\"\"","","try users.parse(input)","","\/\/ error: unexpected input","\/\/  --> input:3:11","\/\/ 3 | 3,Blob Jr,tru","\/\/   |           ^ expected \"true\" or \"false\""],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"With a few small changes we can also turn this parser into a "},{"isActive":true,"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/ParserPrinter","type":"reference"}]},{"type":"paragraph","inlineContent":[{"text":"That’s the basics of parsing a simple string format, but there are a lot more operators and tricks","type":"text"},{"text":" ","type":"text"},{"text":"to learn in order to performantly parse larger inputs.","type":"text"}]}]}],"seeAlsoSections":[{"abstract":[{"type":"text","text":"The collection of videos from "},{"identifier":"https:\/\/www.pointfree.co","type":"reference","isActive":true},{"type":"text","text":" that dive deep into the"},{"type":"text","text":" "},{"type":"text","text":"development of the Parsing library."}],"title":"Related Documentation","identifiers":["https:\/\/www.pointfree.co\/collections\/parsing"]}],"metadata":{"title":"Parsing","modules":[{"name":"Parsing"}],"roleHeading":"Framework","role":"collection","symbolKind":"module","externalID":"Parsing"},"variants":[{"paths":["\/documentation\/parsing"],"traits":[{"interfaceLanguage":"swift"}]}],"references":{"doc://co.pointfree.Parsing/documentation/Parsing/Parsers":{"type":"topic","url":"\/documentation\/parsing\/parsers","kind":"symbol","role":"symbol","title":"Parsers","navigatorTitle":[{"text":"Parsers","kind":"identifier"}],"abstract":[{"text":"A namespace for types that serve as parsers.","type":"text"}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parsers","fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Parsers","kind":"identifier"}]},"https://www.pointfree.co/collections/parsing":{"type":"link","identifier":"https:\/\/www.pointfree.co\/collections\/parsing","titleInlineContent":[{"type":"text","text":"Point-Free Videos"}],"title":"Point-Free Videos","url":"https:\/\/www.pointfree.co\/collections\/parsing"},"doc://co.pointfree.Parsing/documentation/Parsing/AnyConversion":{"abstract":[{"text":"A type-erased ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Conversion"},{"text":".","type":"text"}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/AnyConversion","url":"\/documentation\/parsing\/anyconversion","navigatorTitle":[{"kind":"identifier","text":"AnyConversion"}],"type":"topic","role":"symbol","title":"AnyConversion","kind":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"AnyConversion"}]},"doc://co.pointfree.Parsing/documentation/Parsing/Design":{"abstract":[{"text":"Learn how the library is designed, including its use of protocols, result builders and operators.","type":"text"}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Design","url":"\/documentation\/parsing\/design","role":"article","type":"topic","title":"Design","kind":"article"},"doc://co.pointfree.Parsing/documentation/Parsing/Backtracking":{"abstract":[{"text":"Learn what backtracking is, how it affects the performance of your parsers, and how to avoid it when","type":"text"},{"text":" ","type":"text"},{"text":"unnecessary.","type":"text"}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Backtracking","url":"\/documentation\/parsing\/backtracking","role":"article","type":"topic","title":"Backtracking","kind":"article"},"doc://co.pointfree.Parsing/documentation/Parsing/Conversion":{"role":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Conversion","kind":"identifier"}],"url":"\/documentation\/parsing\/conversion","type":"topic","abstract":[{"text":"Declares a type that can transform an ","type":"text"},{"code":"Input","type":"codeVoice"},{"text":" value into an ","type":"text"},{"code":"Output","type":"codeVoice"},{"text":" value ","type":"text"},{"inlineContent":[{"text":"and","type":"text"}],"type":"emphasis"},{"text":" transform an","type":"text"},{"text":" ","type":"text"},{"code":"Output","type":"codeVoice"},{"text":" value back into an ","type":"text"},{"code":"Input","type":"codeVoice"},{"text":" value.","type":"text"}],"navigatorTitle":[{"text":"Conversion","kind":"identifier"}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Conversion","kind":"symbol","title":"Conversion"},"doc://co.pointfree.Parsing/documentation/Parsing/CountingRange":{"abstract":[],"url":"\/documentation\/parsing\/countingrange","title":"CountingRange","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"CountingRange"}],"navigatorTitle":[{"kind":"identifier","text":"CountingRange"}],"kind":"symbol","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/CountingRange","role":"symbol","type":"topic"},"doc://co.pointfree.Parsing/documentation/Parsing/AnyParserPrinter":{"role":"symbol","navigatorTitle":[{"kind":"identifier","text":"AnyParserPrinter"}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"AnyParserPrinter"}],"type":"topic","url":"\/documentation\/parsing\/anyparserprinter","abstract":[{"type":"text","text":"A type-erased parser-printer of "},{"type":"codeVoice","code":"Output"},{"text":" from ","type":"text"},{"code":"Input","type":"codeVoice"},{"text":".","type":"text"}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/AnyParserPrinter","kind":"symbol","title":"AnyParserPrinter"},"doc://co.pointfree.Parsing/documentation/Parsing/ErrorMessages":{"abstract":[{"type":"text","text":"Learn how the library reports parsing errors and how to integrate your own custom error messages"},{"type":"text","text":" "},{"type":"text","text":"into parsers."}],"type":"topic","title":"Error Messages","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/ErrorMessages","url":"\/documentation\/parsing\/errormessages","role":"article","kind":"article"},"doc://co.pointfree.Parsing/documentation/Parsing/Conditional":{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Conditional","kind":"symbol","navigatorTitle":[{"text":"Conditional","kind":"identifier"}],"role":"symbol","type":"topic","url":"\/documentation\/parsing\/conditional","deprecated":true,"title":"Conditional","fragments":[{"text":"typealias","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Conditional","kind":"identifier"}],"abstract":[]},"doc://co.pointfree.Parsing/documentation/Parsing/GettingStarted":{"abstract":[{"text":"Learn how to integrate Parsing into your project and write your first parser.","type":"text"}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/GettingStarted","url":"\/documentation\/parsing\/gettingstarted","role":"article","type":"topic","title":"Getting Started","kind":"article"},"https://github.com/pointfreeco/swift-parsing/discussions":{"type":"link","identifier":"https:\/\/github.com\/pointfreeco\/swift-parsing\/discussions","titleInlineContent":[{"type":"text","text":"Discussions"}],"title":"Discussions","url":"https:\/\/github.com\/pointfreeco\/swift-parsing\/discussions"},"doc://co.pointfree.Parsing/documentation/Parsing/StringAbstractions":{"abstract":[{"text":"Learn how to write parsers on different levels of string abstractions, giving you the ability to","type":"text"},{"text":" ","type":"text"},{"text":"trade performance for correctness where needed.","type":"text"}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/StringAbstractions","url":"\/documentation\/parsing\/stringabstractions","role":"article","type":"topic","title":"String Abstractions","kind":"article"},"https://github.com/pointfreeco/swift-parsing":{"type":"link","identifier":"https:\/\/github.com\/pointfreeco\/swift-parsing","titleInlineContent":[{"type":"text","text":"GitHub Repo"}],"title":"GitHub Repo","url":"https:\/\/github.com\/pointfreeco\/swift-parsing"},"doc://co.pointfree.Parsing/documentation/Parsing/ParserPrinter":{"type":"topic","url":"\/documentation\/parsing\/parserprinter","kind":"symbol","role":"symbol","title":"ParserPrinter","navigatorTitle":[{"text":"ParserPrinter","kind":"identifier"}],"abstract":[{"text":"A ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser"},{"text":" that can incrementally “print” an output value back into an input.","type":"text"}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/ParserPrinter","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ParserPrinter","kind":"identifier"}]},"doc://co.pointfree.Parsing/documentation/Parsing/ParsePrint":{"type":"topic","abstract":[{"type":"text","text":"An entry to "},{"type":"reference","isActive":true,"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/ParserBuilder"},{"type":"text","text":" syntax that requires the builder to be a printer."}],"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"ParsePrint"}],"title":"ParsePrint","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/ParsePrint","kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"ParsePrint"}],"role":"symbol","url":"\/documentation\/parsing\/parseprint"},"doc://co.pointfree.Parsing/documentation/Parsing/Conversions":{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Conversions","abstract":[{"type":"text","text":"A namespace for types that serve as conversions."}],"url":"\/documentation\/parsing\/conversions","navigatorTitle":[{"text":"Conversions","kind":"identifier"}],"title":"Conversions","kind":"symbol","fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Conversions","kind":"identifier"}],"type":"topic","role":"symbol"},"doc://co.pointfree.Parsing/documentation/Parsing/ParserBuilder":{"url":"\/documentation\/parsing\/parserbuilder","role":"symbol","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/ParserBuilder","abstract":[{"text":"A custom parameter attribute that constructs parsers from closures. The constructed parser","type":"text"},{"text":" ","type":"text"},{"text":"runs a number of parsers, one after the other, and accumulates their outputs.","type":"text"}],"kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"ParserBuilder"}],"fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"ParserBuilder"}],"type":"topic","title":"ParserBuilder"},"doc://co.pointfree.Parsing/documentation/Parsing/Parser":{"url":"\/documentation\/parsing\/parser","role":"symbol","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser","abstract":[{"text":"Declares a type that can incrementally parse an ","type":"text"},{"type":"codeVoice","code":"Output"},{"text":" value from an ","type":"text"},{"type":"codeVoice","code":"Input"},{"text":" value.","type":"text"}],"kind":"symbol","navigatorTitle":[{"text":"Parser","kind":"identifier"}],"fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"text":"Parser","kind":"identifier"}],"type":"topic","title":"Parser"},"doc://co.pointfree.Parsing/documentation/Parsing/PrependableCollection":{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/PrependableCollection","navigatorTitle":[{"text":"PrependableCollection","kind":"identifier"}],"title":"PrependableCollection","abstract":[{"type":"text","text":"A collection that supports empty initialization and the ability to prepend a sequence of"},{"type":"text","text":" "},{"text":"elements of elements to itself.","type":"text"}],"url":"\/documentation\/parsing\/prependablecollection","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"PrependableCollection","kind":"identifier"}],"role":"symbol","type":"topic","kind":"symbol"},"doc://co.pointfree.Parsing/documentation/Parsing":{"url":"\/documentation\/parsing","role":"collection","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing","abstract":[{"text":"A library for turning nebulous data into well-structured data, with a focus on composition,","type":"text"},{"text":" ","type":"text"},{"text":"performance, generality, and ergonomics.","type":"text"}],"kind":"symbol","type":"topic","title":"Parsing"}}}